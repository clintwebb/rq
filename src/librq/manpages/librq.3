.\" man page for librq
.\" Contact dev@hyper-active.com.au to correct errors or omissions. 
.TH librq 3 "3 June 2009" "0.01.00" "Library for accessing an RQ system."
.SH NAME
librq \- library for accessing and making requests of an RQ system.
.SH SYNOPSIS
#include <rq.h>
.sp
.B void rq_init(rq_t *rq)
.br
.B void rq_cleanup(rq_t *rq)
.br
.B void rq_setevbase(rq_t *rq, struct event_base *base)
.br
.B void rq_addcontroller(rq_t *rq, char *host, int port)
.br
.B void rq_consume(rq_t *rq, char *queue, int max, int priority, int exclusive, void (*handler)(rq_message_t *msg, void *arg), void *arg)
.sp
.B rq_message_t * rq_msg_new(rq_t *rq)
.br
.B void rq_msg_clear(rq_message_t *msg)
.br
.B void rq_msg_setqueue(rq_message_t *msg, char *queue)
.br
.B void rq_msg_setbroadcast(rq_message_t *msg)
.br
.B void rq_msg_setnoreply(rq_message_t *msg)
.sp
.B #define rq_msg_addcmd(m,c)              (addCmd((m)->data,(c)))
.br
.B #define rq_msg_addcmd_shortint(m,c,v)   (addCmdShortInt((m)->data,(c), (v)))
.br
.B #define rq_msg_addcmd_int(m,c,v)        (addCmdInt((m)->data,(c),(v)))
.br
.B #define rq_msg_addcmd_largeint(m,c,v)   (addCmdLargeInt((m)->data,(c), (v)))
.br
.B #define rq_msg_addcmd_shortstr(m,c,l,s) (addCmdShortStr((m)->data,(c), (l), (s)))
.br
.B #define rq_msg_addcmd_str(m,c,l,s)      (addCmdStr((m)->data,(c), (l), (s)))
.br
.B #define rq_msg_addcmd_largestr(m,c,l,s) (addCmdLargeStr((m)->data,(c), (l), (s)))
.sp
.B void rq_msg_setdata(rq_message_t *msg, int length, char *data)
.sp
.B void rq_send(rq_t *rq, rq_message_t *msg, void (*handler)(rq_reply_t *reply, void *arg), void *arg)
.br
.B void rq_resend(rq_message_t *msg);
.sp
.B void rq_set_maxconns(int maxconns)
.br
.B int  rq_new_socket(struct addrinfo *ai)
.br
.B int  rq_daemon(char *username, char *pidfile, int noclose);
.sp
compile with the 
.B -lrq
option
.SH DESCRIPTION
.B librq
is a comprehensive library used to connect to an RQ controller and make requests to queues.  RQ is an advanced message queue system that is designed primarily for web or api services.
.sp
The primary goals of RQ are:
.br
	* Updates and maintenance can happen with 0% downtime.
	* Services can all be on a single server, or spread out over multiple servers.
	* Services can be running in a load-balanced manner.
	* Services can also have a single instance running at a time, with any number of backup services on standby. 
.br

.SH SEE ALSO
.BR rq_init (3),
.BR rq_free (3),
.BR rq_t (3)
.SH BUGS
No known bugs at this time. 
.SH AUTHOR
.nf
Clint Webb (webb.clint@gmail.com)
on behalf of Hyper-Active Systems, Australia.
.br
http://www.hyper-active.com.au/librq/
.fi
.SH HISTORY
May 29, 2009 \- v1.02 initial.
